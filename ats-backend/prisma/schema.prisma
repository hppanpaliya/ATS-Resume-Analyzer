// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ========================================
// MODELS
// ========================================

model User {
  id                    String    @id @default(uuid())

  // Authentication
  email                 String    @unique
  emailVerified         Boolean   @default(false)
  passwordHash          String

  // Profile
  firstName             String?
  lastName              String?
  phone                 String?
  profilePictureUrl     String?

  // Subscription
  subscriptionTier      String    @default("free")
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?

  // Usage Tracking
  resumesCreated        Int       @default(0)
  analysesRunToday      Int       @default(0)
  lastAnalysisDate      DateTime?
  aiGenerationsToday    Int       @default(0)
  aiOptimizationsToday  Int       @default(0)

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  deletedAt             DateTime?

  // Settings
  settings              String    @default("{}")

  // Relations
  resumes               Resume[]
  jobDescriptions       JobDescription[]
  analyses              Analysis[]
  aiUsage               AiUsage[]
  subscription          Subscription?
  auditLogs             AuditLog[]

  @@map("users")
}

model Resume {
  id                    String    @id @default(uuid())
  userId                String

  // Resume Info
  title                 String
  templateId            String?

  // Content
  content               String
  extractedText         String?

  // Status
  status                String    @default("draft")
  isPublic              Boolean   @default(false)

  // AI Enhancement
  aiOptimizedForJdId    String?
  optimizationScore     Int?

  // Files
  originalFileUrl       String?
  exportedPdfUrl        String?

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastAccessedAt        DateTime?
  deletedAt             DateTime?

  // Version
  version               Int       @default(1)
  parentResumeId        String?

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template              Template? @relation(fields: [templateId], references: [id])
  optimizedFor          JobDescription? @relation("optimizedFor", fields: [aiOptimizedForJdId], references: [id])
  parentResume          Resume?   @relation("ResumeVariants", fields: [parentResumeId], references: [id])
  childResumes          Resume[]  @relation("ResumeVariants")
  versions              ResumeVersion[]
  analyses              Analysis[]

  @@map("resumes")
}

model ResumeVersion {
  id                    String    @id @default(uuid())
  resumeId              String

  // Version Info
  versionNumber         Int
  content               String

  // Change Tracking
  changeSummary         String?
  changedByUserId       String?
  changeType            String?

  // Metadata
  createdAt             DateTime  @default(now())

  // Relations
  resume                Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([resumeId, versionNumber])
  @@map("resume_versions")
}

model Template {
  id                    String    @id @default(uuid())

  // Template Info
  name                  String    @unique
  description           String?
  category              String?

  // Design
  design                String

  // Preview
  previewImageUrl       String?
  demoResumeId          String?

  // Status
  isActive              Boolean   @default(true)
  isPremium             Boolean   @default(false)
  atsScore              Int?

  // Usage
  usageCount            Int       @default(0)

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  resumes               Resume[]

  @@map("templates")
}

model JobDescription {
  id                    String    @id @default(uuid())
  userId                String

  // Job Info
  title                 String
  company               String?
  location              String?

  // Content
  description           String
  extractedData         String?

  // Source
  sourceUrl             String?

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses              Analysis[]
  optimizedResumes      Resume[]  @relation("optimizedFor")

  @@map("job_descriptions")
}

model Analysis {
  id                    String    @id @default(uuid())
  userId                String
  resumeId              String
  jobDescriptionId      String?

  // Analysis Type
  analysisType          String

  // AI Provider
  aiProvider            String?
  modelUsed             String?

  // Results
  results               String

  // Performance
  processingTimeMs      Int?
  tokensUsed            Int?
  estimatedCost         String?

  // Status
  status                String    @default("pending")
  errorMessage          String?

  // Metadata
  createdAt             DateTime  @default(now())
  completedAt           DateTime?

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume                Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobDescription        JobDescription? @relation(fields: [jobDescriptionId], references: [id], onDelete: SetNull)

  @@map("analyses")
}

model AiUsage {
  id                    String    @id @default(uuid())
  userId                String

  // Request Info
  feature               String
  aiProvider            String
  model                 String?

  // Usage Metrics
  tokensUsed            Int?
  estimatedCost         String?

  // Summaries
  requestSummary        String?
  responseSummary       String?

  // Performance
  responseTimeMs        Int?
  wasCached             Boolean   @default(false)

  // Metadata
  createdAt             DateTime  @default(now())
  date                  DateTime  @default(now())

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage")
}

model Subscription {
  id                    String    @id @default(uuid())
  userId                String    @unique

  // Subscription Info
  tier                  String
  status                String    @default("active")

  // Billing
  stripeCustomerId      String?
  stripeSubscriptionId  String?

  // Dates
  startDate             DateTime
  endDate               DateTime?
  trialEndDate          DateTime?
  cancelledAt           DateTime?

  // Custom Limits
  customLimits          String?

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AuditLog {
  id                    String    @id @default(uuid())
  userId                String?

  // Action Info
  action                String
  entityType            String?
  entityId              String?

  // Request Details
  ipAddress             String?
  userAgent             String?

  // Changes
  changes               String?

  // Metadata
  createdAt             DateTime  @default(now())

  // Relations
  user                  User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
